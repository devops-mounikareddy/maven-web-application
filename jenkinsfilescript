
node('nodes') {
def mavenHome=tool name :"maven3.8.5"
  
   properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')), [$class: 'JobLocalConfiguration', changeReasonComment: ''], pipelineTriggers([pollSCM('* * * * *')])]) 
    
    echo "the job name is: ${env.JOB_NAME}"
    echo "the node name is: ${env.NODE_NAME}"
    echo "the build number is:${env.BUILD_NUMBER}"
   try {
    
    notifyBuild('STARTED')
    
    stage ('checkoutcode')
    {
    git branch: 'development', credentialsId: '4739abbf-ff4d-4d23-8b30-60b5c8174e8f', url: 'https://github.com/devops-mounikareddy/maven-web-application.git'
    }
   stage ('buildArtifact')
   {
    sh "${mavenHome}/bin/mvn clean package"
   }
   stage ('triggerdownstreamJob')
   {
   build job: 'pipelinescript with parameters'
   }
  /*
  stage ('ExecuteSonarqubeReport')
   {
   sh "${mavenHome}/bin/mvn sonar:sonar"
   }
   stage ('uploadArtifactIntoNexus')
   {
    sh "${mavenHome}/bin/mvn deploy"
   }
   stage ('delpoyIntoTomcat')
   {
    sshagent(['017cd370-aeb3-4d8a-b196-ac3b88ef306a']) {
   sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@172.31.33.126:/opt/apache-tomcat-9.0.63/webapps"
    }
    
   }
   */
   }catch (e) {
    // If there was an exception thrown, the build failed
    currentBuild.result = "FAILED"
    throw e
  } finally {
    // Success or failure, always send notifications
    notifyBuild(currentBuild.result)
  }//try closing

}//node closing

def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESS'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESS') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary, channel: 'wallmart')
}
